#principles_of_reactive_programming 
#RxJava: Reactive Extensions in Scala
#http://www.oracle.com/technetwork/articles/java/jonasboner-1537758.html

env JAVA_OPTS="-Dakka.loglevel=DEBUG -Dakka.actor.debug.receive=on" sbt
If you want very detailed logging of user-level messages then wrap your actors' behaviors with akka.event.LoggingReceive (ensure -Dakka.actor.debug.receive=on)

The four traits that make up reactive applications are: 
  responsive: react to users
  scalable: react to load
  resilient: react to failure
  event-driven: react to events
--from http://manning.com/bernhardt/RWAwithPlay_MEAP_ch01.pdf

Monad: A Monad M is a parametric type constructor M[T], with two operations flatMap and unit, that have to satisfy some laws.
    trait M[T]{
        def flatMap[S](f: T => M[S]):M[S]
    }
    def unit[T](x: T): M[T]

for-expressions are converted into a sequence of map, flatMap and withFilter calls.
    for(x <- e1) yield e2 <=> e1.map(x => e2) 
    for(x <- e1 if f; s) yield e2 <=> for(x <- e1.withFilter(x => f); s) yield e2 
    for(x <- e1; y <- e2; s) yield e3 <=> e1.flatMap(x => for (y <- e2; s) yield e3)


for-loops are converted to a sequence of foreach calls.
    for (i <- 1 until 3; j <- "abc") println(i + " " +j)
    translates to:
    (1 until 3) foreach (i => "abc" foreach (j => println(i + " " + j)))

Substitution Model: Programs can be evaluated by "rewriting"
    def f(x1,...,xn)=B; ... f(v1,...,vn) 
    -->  
    def f(x1,...,xn)=B; ... [v1/x1,...,vn/xn]B

Referential Transparency
    val x = E; val y = E
    <=>
    val x = E; val y = x


Church-Russer Theorem in lambda calculus (Confluence: Difference evaluation path leads to the same result)
    Rewriting can be done anywhere in a term, and all rewritings which terminate lead to the same solution.

An object has a state if its behavior is influenced by its history.

Operational Equivalence: Given two definitions x and y, we say that they are operationally equivalent if "no possible test" can distinguish between them.

The Substitution Model doesn't hold for impure functions.

Reinventing Loops:
    def WHILE(condition: => Boolean)(command: => Unit): Unit = //params are passed by name so that they are reevaluated in each iteration
        if (condition) {
            command
            WHILE(condition)(command) //A tail recursive call => constant stack size
        } else ()

Thread-Local is supported in Scala through class scala.util.DynamicVariable

Signal as a Meta-pattern using the Observer Pattern

The four essential effects in programming
                | One                                                     | Many         |
    -------------------------------------------------------------------------------------
    Synchronous | T/Try[T]                                                | Iterable[T]  |
                | Try[T] is a monad that handles Failure                  |              |
    -------------------------------------------------------------------------------------
    Asynchronous| Future[T]                                               | Observable[T]|
                | Future[T] is a monad that handles failure and latency   |
    -------------------------------------------------------------------------------------

Async await magic
    import scala.async.Async._
    def async[T](body: => T)(implicit context:ExecutionContext): Future[T]
    def await[T](future: Future[T]): T
    async {... await{...} ...} // this enables a somewhat imperatif like style

Implementing zip using asyn wait
    def zip[S, R](that: Future[S], f:(T,S)=>R):Future[R] = async{
      f(await{this}, await{that})
    }

    -----------------------------------------
    |Iterable[T]       | Observable[T]|      |
    -----------------------------------------
    | pull             | push                |
    | T next()         | onNext(T)           |
    | throws Exception | onError(Exception)  |
    | returns          | onCompleted()       |
    -----------------------------------------

Rx: Reactive Extensions
Marble Diagrams

Rx Observable Streams
  Observable => Event Source
  Observer   => Event Handler
  Subscription => Check the state of subscription (in the Server Side) or Stop Listening (in the Client Side)

With Observable:
    - The Client code treats all interactions with the API as ASYNCHRONOUS
    - The API implementation chooses whether something is "BLOCKING or NON-BLOCKING" AND "WHAT RESOURCES IT USES"

             Asynchronous
             Values
             Events
             Push
  FUNCTIONAL REACTIVE
    Lambdas
    Closures
    Pure
    Composable

 An Actor
   - is an object with identity
   - has a behavior
   - only interacts using ASYNCHRONOUS Message passing

Akka Actor under microscope ;-)
  type Receive = PartialFunction[Any, Unit]
  trait Actor {
    implicit val self: ActorRef
    def sender: ActorRef
    def receive: Receive // "The current behavior of the actor"
  }
  abstract class ActorRef{
    def !(msg: Any)(implicit sender: ActorRef = Actor.noSender): Unit
    def tell(msg: Any, sender: ActorRef) = this.!(msg)(sender)
  }
  trait ActorContext {
    def become(behavior: Receive, discardOld: Boolean = true): Unit // "change behavior"
    def unbecome(): Unit //"change behavior"
    def actorOf(p: Props, name: String): ActorRef //"create a child actor"
    def stop(a: ActorRef): Unit //"kill an actor"
  }

AsyncHttpClient: The Async Http Client library purpose is to allow Java applications to easily execute HTTP requests and asynchronously process the HTTP responses. The library also supports the WebSocket Protocol.

Jsoup: A Java HTML Parser

Actor is the most encapsulated form of Object Orientation

An Actor is Single Threaded and processing one message is the atomic unit of execution

A reactive application is non-blocking & event driven top to bottom

Actors are run bya dispatcher (we can get access to it via context.dispatcher) -potentially shared- which can also run Futures 

In Akka the system is the container in which all actors run

Actors in Akka implement a share-nothing architecture. They can be seen as the ultimate object orientation, encapsulating state and behavior. But in contrast to what happens with normal Java classes, every state change is local and cannot in any way affect any other part of the system, which is a big relief. Actors are also much more decoupled than standard Java objects: if one actor crashes (fails with an exception), it will not affect any other part of the system. So if an actor fails, you know where to look, because the failure is completely isolated. When you add the actor style of fault tolerance, in which actors that you create are automatically linked to each other in a “supervisor hierarchy” tree, you get a system that can monitor and heal itself—a very robust system. -- Jonas Bonér

In Akka: The Tree hierarchy for supervision == The Tree hierarchy for creation

Mandatory Parental Supervision
